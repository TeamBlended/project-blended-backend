# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
# This workflow will build a Java project with Gradle and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-gradle

name: Java CI with Gradle

on:
  push:
    branches: [ "develop", "main"]
  pull_request:
    branches: [ "develop", "main"]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'


    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    ## create application-dev.properties
    - name: make application-dev.properties
      if: contains(github.ref, 'develop')
      run: |
        cd ./src/main/resources
        touch ./application-dev.properties
        echo "${{ secrets.PROPERTIES_DEV }}" > ./application-dev.properties
      shell: bash

    ## create application-prod.properties
    - name: make application-prod.properties
      if: contains(github.ref, 'main')
      run: |
          cd ./src/main/resources
          touch ./application-prod.properties
          echo "${{ secrets.PROPERTIES_PROD }}" > ./application-prod.properties
      shell: bash

    ## gradle build
    - name: Build with Gradle
      run: ./gradlew clean build
    
    ## docker build & push to production
    - name: Docker build & push to prod
      if: contains(github.ref, 'main')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-prod -t ${{ secrets.DOCKER_REPO }}/blended-prod .
          docker push ${{ secrets.DOCKER_REPO }}/blended-prod
    ## docker build & push to develop
    - name: Docker build & push to dev
      if: contains(github.ref, 'develop')
      run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile-dev -t ${{ secrets.DOCKER_REPO }}/blended-dev .
          docker push ${{ secrets.DOCKER_REPO }}/blended-dev
          
    ## deploy to production
    - name: Deploy to prod
      uses: appleboy/ssh-action@master
      id: deploy-prod
      if: contains(github.ref, 'main')
      with:
          host: ${{ secrets.HOST_PROD }}
          username: ec2-user
          envs: GITHUB_SHA
          script: |
              sudo docker rm -f $(docker ps -qa)
              sudo docker pull ${{ secrets.DOCKER_REPO }}/blended-prod
              docker-compose up -d
              docker image prune -f

    ## deploy to develop
    - name: Deploy to dev
      uses: appleboy/ssh-action@master
      id: deploy-dev
      if: contains(github.ref, 'develop')
      with:
        host: ${{ secrets.HOST_DEV }}
        username: ${{ secrets.USERNAME }}
        password: ${{ secrets.PASSWORD }}
        port: 22
        script: |
            sudo docker rm -f $(docker ps -qa)
            sudo docker pull ${{ secrets.DOCKER_REPO }}/blended-dev
            docker-compose up -d
            docker image prune -f


